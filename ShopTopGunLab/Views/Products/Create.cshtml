@using Domain.Entities
@model Domain.Entities.Product

@{
    ViewData["Title"] = "Create";
}
<script>
    function InvalidMsg(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Entering an email-id is necessary!');
        } else if (textbox.validity.typeMismatch) {
            textbox.setCustomValidity
                ('Please enter an email address which is valid!');
        } else {
            textbox.setCustomValidity('');
        }

        return true;
    }
</script>


<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control"  oninput="InvalidMsg(this);" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control"  oninput="InvalidMsg(this);"/>
                <span asp-validation-for="Quantity" class="text-danger"></span>
                <select asp-for="dimension" asp-items="@Html.GetEnumSelectList<Dimension>()" class="form-control selectpicker"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
